name: api

on:
  push:
    # Publish `dev` as Docker `latest` image.
    branches:
      - dev
    paths:
      - 'api/*'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  #pull_request:

env:
  IMAGE_NAME: api

jobs:
  # Run tests. See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build $IMAGE_NAME/. --file $IMAGE_NAME/Dockerfile
  #         fi

  # Build & push to registry
  push:
    #needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build $IMAGE_NAME/. --file $IMAGE_NAME/Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "dev" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  # Deploy dev environment
  deploy:
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Pull and recreate
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          envs: IMAGE_NAME
          script: |
            cd spotcity
            git pull
            git chekout dev
            docker-compose pull $IMAGE_NAME
            docker-compose up -d $IMAGE_NAME
