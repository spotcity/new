version: '3.3'

services:
  traefik:
    image: traefik:v2.3
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - ext
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      - --entrypoints.web.address=:80
      - --providers.docker=true
      - --api.insecure
      # metrics
      - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
      - --entryPoints.metrics.address=:8082
      - --metrics.prometheus.entryPoint=metrics
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
    labels:
      # dashboard
      - "traefik.http.routers.traefik.rule=Host(`localhost`) && Pathfix(`/traefik`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=admin"
      - "traefik.http.middlewares.admin.basicauth.users=dev:$$apr1$$d39ozBX8$$Q47EfEq9ZdD859hJuDORX."
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  frontend:
    image: ghcr.io/spotcity/front:${image_tag}
    restart: unless-stopped
    ports:
      - "8000:80"
    networks:
      - ext
    labels:
      - "traefik.http.routers.spotcity-front.rule=Host(`localhost`)"

  api:
    image: ghcr.io/spotcity/api:${image_tag}
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - ext
    labels:
      - "traefik.http.routers.spotcity-api.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.middlewares.stripapi.stripprefix.prefixes=/api"
      - "traefik.http.routers.spotcity-api.middlewares=stripapi@docker"
      - "traefik.http.services.spotcity-api.loadbalancer.server.port=5000"
    # depends_on:
    #   - redis
    #   - postgres

  # postgres:
  #   image: postgres:${image_tag}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - int
  #   environment:
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # redis:
  #   image: redis:${image_tag}
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - int

networks:
  ext:
#  int:

# volumes:
#   pg_data:
